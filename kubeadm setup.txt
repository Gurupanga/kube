Deployment steps for Tomcat and Mongodb through my local laptop setup:
=============================================================================

1. Connect to the master node, once done we can execute the below commands under root user.

apt-get update
apt-get install -y docker.io
usermod -aG docker $1
apt-get update && apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
apt-get install -y kubelet kubeadm kubectl

vi setup.sh 
chmod +x setup.sh 
sh setup.sh ubuntu ( here i run ubuntu as a user)

2. then we can init the kubeadm init command

it will give output looks like - 

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.92.198:6443 --token memzm9.t9jqpucei3602m15 \
    --discovery-token-ca-cert-hash sha256:5663890eceb37be1ae7cb31eaef22cd7c04cd669f253e4fc076c285b57946d5c

	
	we can execute the above commands under master node except kubeadm join command.
	
3. For pod configuration we can establish network communication for that i can run below command:

ubuntu@ip-172-31-92-198:~$ kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
serviceaccount/weave-net created
clusterrole.rbac.authorization.k8s.io/weave-net created
clusterrolebinding.rbac.authorization.k8s.io/weave-net created
role.rbac.authorization.k8s.io/weave-net created
rolebinding.rbac.authorization.k8s.io/weave-net created
daemonset.extensions/weave-net created


4. Next login to Nodes , once done we can executes the below commands under nodes root user

vi setup.sh


apt-get update
apt-get install -y docker.io
usermod -aG docker $1
apt-get update && apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
apt-get install -y kubelet kubeadm kubectl

save and exit

chmod +x setup.sh

run sh setup.sh ubuntu 

5. For node to master communication we can execute the join command under nodes user directory.

root@ip-172-31-82-97:~# kubeadm join 172.31.92.198:6443 --token memzm9.t9jqpucei3602m15 \
>     --discovery-token-ca-cert-hash sha256:5663890eceb37be1ae7cb31eaef22cd7c04cd669f253e4fc076c285b57946d5c
[preflight] Running pre-flight checks

        [WARNING Service-Docker]: docker service is not enabled, please run 'systemctl enable docker.service'
        [WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'
[kubelet-start] Downloading configuration for the kubelet from the "kubelet-config-1.14" ConfigMap in the kube-system namespace
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Activating the kubelet service
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.

--> once we can join we can see the how many nodes are joined under master is -

kubectl get nodes ( command to see how many nodes are joined )


6. Then we can write the deployment file and service file for tomcat application and mongodb server . once once we can create the deployment and service configuration we can execute the following commands under master node:

ubuntu@ip-172-31-92-198:~$ kubectl apply -f deploymongo.yaml
deployment.apps/mongo-db created
ubuntu@ip-172-31-92-198:~$ vi serv1.yaml
ubuntu@ip-172-31-92-198:~$ vi serv2.yaml
ubuntu@ip-172-31-92-198:~$ kubectl apply -f serv2.yaml

simillary for tomcat also we can do execute same commands .

once done we can see the services by executing - kubectl get service 

7. once done we can access the application through nodes public ip address and port .




